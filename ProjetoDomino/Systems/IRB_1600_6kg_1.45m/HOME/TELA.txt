MODULE TELA
    
    VAR num pecasJogador1{7};
    VAR num pecasJogador2{7};
    VAR num pecasJogo{28,2};
    VAR num pecasCompra{28,2};
    VAR num pecasBaixadas :=1;
    VAR num maior := -1;
    
    VAR num tempoDelay := 1.5;
    
    VAR loadsession load2;
    !! =======================================================================================================================
    !!                                              FUNÇÃO DE RANDOM - TIRADO DO SITE ()
    !! =======================================================================================================================
    
    LOCAL VAR num nSeed:=320;
    LOCAL VAR num nSeed_age:=150;
    
    LOCAL FUNC num Random()
        CONST num nModulus:=625;
        CONST num nMultiplier:=251;
        CONST num nIncrement:=13849;
        
        IF nSeed_age>140 THEN 
            nSeed:= GetTime(\Sec) * GetTime(\Min);
            nSeed_age:=0;
        ENDIF
        
        nSeed_age:=nSeed_age+1;
        nSeed:= ((nMultiplier*Abs(nSeed))+nIncrement) MOD nModulus;
        
        RETURN Round(((nSeed/nModulus)*27)+1);
    ENDFUNC
    
    !! =======================================================================================================================
    !! =======================================================================================================================
    !! =======================================================================================================================
    
    PROC setarPecas()
        pecasJogo :=[[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[0,6],
                     [1,1],[1,2],[1,3],[1,4],[1,5],[1,6],
                     [2,2],[2,3],[2,4],[2,5],[2,6],
                     [3,3],[3,4],[3,5],[3,6],
                     [4,4],[4,5],[4,6],
                     [5,5],[5,6],
                     [6,6]];
        pecasCompra := pecasJogo;
    ENDPROC
    
    ! Essa função sorteia as peças para ambos os jogadores no começo da partida
    FUNC bool sortearPecas()
        
        ! Seta as variáveis
        VAR num rand;
        VAR bool quemPossuiMaiorPeca;
        
        ! Esse for sorteia 7 peças e as coloca para o jogador 1. Sorteia mais 7 e coloca para o jogador 2,
        ! Nesta função já se define quem começa com a maior peça, controlado pela variável maior e quemPossuiMaiorPeca;
        FOR i FROM 1 TO 14 DO
            rand := Random();
            
            WHILE pecasCompra{rand,1} = -1 DO
                rand := Random();
            ENDWHILE
            
            IF maior < rand THEN
                maior := rand;
                quemPossuiMaiorPeca := (i<=7);
            ENDIF
            
            IF i<=7 THEN
                pecasJogador1{i}:=rand;
            ELSE
                pecasJogador2{i-7}:=rand;
            ENDIF
            
            pecasCompra{rand,1}:=-1;
            pecasCompra{rand,2}:=-1;
        ENDFOR
        
        RETURN quemPossuiMaiorPeca;
        
    ENDFUNC
    
    PROC imprimePecas(num jogador, num delay)
        WaitTime delay;
        TPWrite " ";
        
        IF jogador = 1 THEN
            FOR i FROM 1 TO 7 DO
                TPWrite "Peça " + NumToStr(i,0) +"- J1 = " + NumToStr(pecasJogo{pecasJogador1{i},1},0)+ "-" + NumToStr(pecasJogo{pecasJogador1{i},2},0);    
            ENDFOR
        ELSE
            FOR i FROM 1 TO 7 DO
                TPWrite "Peça " + NumToStr(i,0) +"- J2 = " + NumToStr(pecasJogo{pecasJogador2{i},1},0)+ "-" + NumToStr(pecasJogo{pecasJogador2{i},2},0);    
            ENDFOR
        ENDIF
        
        TPWrite " ";
        WaitTime delay;

    ENDPROC
    
    PROC setarTela()
        
        ! Define a variável para verificar que joga primeiro, ou seja, o jogador que tem a maior peça
        VAR bool quemJogaPrimeiro;
        VAR num escolhaPlayer1 := 8;
        VAR num qtdPecasPlayer1:= 7;
        VAR num escolhaPlayer2;
        VAR num qtdPecasPlayer2 := 7;
        
        ! Seta o vetor de pecas
        setarPecas;
        
        ! Mostra na tela
        TPWrite "======================================";
        WaitTime 0.25;
        TPWrite "======================================";
        WaitTime 0.25;
        TPWrite "=============== DOMINÓ ===============";
        WaitTime 0.25;
        TPWrite "======================================";
        WaitTime 0.25;
        TPWrite "======================================";
        WaitTime 0.25;
        TPWrite " ";
        
        ! Sorteia as peças dos Jogadores
        TPWrite "Sorteando as peças dos jogadores";
        WaitTime tempoDelay;
        
        quemJogaPrimeiro := sortearPecas();
        
        ! Imprime as peças do jogador 1 e 2
        imprimePecas 1,tempoDelay;
        imprimePecas 2,tempoDelay;
        
        ! Verifica quem possui a maior peça
        TPWrite " ";
        TPWrite "Verificando quem possui a peça maior (6/6 - 6/5 - 6/4 - ...)";
        TPWrite " ";
        WaitTime tempoDelay;
        
        ! Mostra o jogador com a maior peça
        IF quemJogaPrimeiro THEN
            TPWrite "Você baixou a peça";    
        ELSE
            TPWrite "Computador baixou a peça";
        ENDIF
        
        quemJogaPrimeiro := quemJogaPrimeiro XOR TRUE;
        
        !Carrega classe de desenho
        StartLoad \Dynamic, diskhome \File:="DESENHAR.MOD", load2;
        WaitLoad load2;
        
        %"desenhaPeca"% pecasJogo{maior,1},pecasJogo{maior,2};
        
        
        
        !Loop de jogo até o fim da partida
        
        IF quemJogaPrimeiro THEN
            WHILE escolhaPlayer1 > qtdPecasPlayer1  DO
                imprimePecas 1,1.0;
                TPReadNum escolhaPlayer1, "Selecione a Peça para Jogar";
                IF escolhaPlayer1 > qtdPecasPlayer1 THEN
                    TPWrite "Número inválido, escolha novamente";
                ENDIF
            ENDWHILE
            WaitTime tempoDelay;
            

            
            %"desenhaPeca"% pecasJogo{pecasJogador1{escolhaPlayer1},1},pecasJogo{pecasJogador1{escolhaPlayer1},2};
            
            UnLoad diskhome \File:="DESENHAR.MOD";
            
            WaitTime tempoDelay;
        ELSE    
            
        ENDIF
        
        
    ENDPROC
ENDMODULE